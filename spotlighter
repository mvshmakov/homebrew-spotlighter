#!/usr/bin/env sh
# This script opts out Spotlight from indexing common development directories
# such as node_modules, Python virtual environments and .direnv.
#
# It is aimed to be 100% POSIX-compliant, but is only MacOS-relevant.
#
# Inspired by https://github.com/Strajk/setup and
# https://mattprice.me/2020/programmatically-modify-spotlight-ignore/.

# TODO: add usage examples
# TODO: add shfmt support to the gh workflow

set -eu

DIR="$PWD"
PLIST="/System/Volumes/Data/.Spotlight-V100/VolumeConfiguration.plist"
PLIST_BUDDY_BIN="/usr/libexec/PlistBuddy"
FORCE=false
VERBOSE=false

get_exclusions() {
  sudo "$PLIST_BUDDY_BIN" -c 'Print :Exclusions' "$PLIST" |
    sed -e 1d -e '$d' -e 's/^[\t ]*//'
}

find_candidates() {
  if command -v rg >/dev/null 2>&1; then
    rg --files "$DIR" 2>/dev/null |
      grep -E '/(node_modules|venv|\.venv|\.direnv)/' |
      sed -E 's#(.*/(node_modules|venv|\.venv|\.direnv)).*#\1#' |
      sort -u
  else
    find "$DIR" \
      \( -type d -name node_modules -o -type d -name venv -o -type d -name .venv -o -type d -name .direnv \) -prune
  fi
}

generate_completions() {
  shell="${1:-bash}"
  case "$shell" in
  bash)
    cat <<'EOF'
# bash completion for spotlighter
_spotlighter() {
  local cur cmds opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  cmds="add show find check completions"
  opts="-d --dir -f --force -v --verbose -h --help"
  COMPREPLY=( $(compgen -W "$cmds $opts" -- "$cur") )
  return 0
}
complete -F _spotlighter spotlighter
EOF
    ;;
  zsh)
    cat <<'EOF'
#compdef spotlighter

_arguments \
  '-d[Directory to search]:directory:_files -/' \
  '-f[Rebuild exclusions from scratch]' \
  '-v[Print additional information]' \
  '-h[Show help]' \
  '1:command:(add show find check completions)'
EOF
    ;;
  *)
    printf 'Unsupported shell: %s\n' "$shell" >&2
    exit 1
    ;;
  esac
}

check_status() {
  mdutil -sv "$DIR"
  if [ "$VERBOSE" = true ]; then
    printf 'Current exclusions:\n'
    get_exclusions
  fi
}

add_missing() {
  candidates="$(find_candidates)"

  if [ "$FORCE" = true ]; then
    sudo "$PLIST_BUDDY_BIN" -c 'Delete :Exclusions' "$PLIST" 2>/dev/null || true
    sudo "$PLIST_BUDDY_BIN" -c 'Add :Exclusions array' "$PLIST"
    existing=""
  else
    existing="$(get_exclusions)"
  fi

  if [ "$VERBOSE" = true ]; then
    printf 'Candidates: %s\n' "$(printf '%s\n' "$candidates" | wc -l)"
    printf 'Existing: %s\n' "$(printf '%s\n' "$existing" | wc -l)"
  fi

  printf '%s\n' "$candidates" | while IFS= read -r path; do
    if ! printf '%s\n' "$existing" | grep -Fxq "$path"; then
      sudo "$PLIST_BUDDY_BIN" -c "Add :Exclusions: string $path" "$PLIST"
    fi
  done

  sudo launchctl stop com.apple.metadata.mds
  sudo launchctl start com.apple.metadata.mds

  if [ "$VERBOSE" = true ]; then
    printf 'Current exclusions:\n'
    get_exclusions
  fi
  printf '\n\xF0\x9F\x91\x80 Check and verify at System Settings > Siri & Spotlight > Spotlight Privacy\n'
}

usage() {
  cat <<USAGE
Usage: $(basename "$0") [options] [command]
Commands:
  add     Find development directories and add them to Spotlight exclusions (default)
  show    Show current Spotlight exclusions
  find    Print candidate development directories
  check   Show Spotlight indexing status for the directory
  completions [SHELL]  Generate shell completion script (bash or zsh)
Options:
  -d DIR, --dir DIR     Directory to search (default: current directory)
  -f, --force           Rebuild exclusions from scratch
  -v, --verbose         Print additional information
  -h, --help            Show this help message
USAGE
}

cmd="add"
comp_shell=""
while [ $# -gt 0 ]; do
  case "$1" in
  add | show | find | check | completions)
    cmd="$1"
    shift
    if [ "$cmd" = "completions" ] && [ $# -gt 0 ]; then
      comp_shell="$1"
      shift
    fi
    ;;
  -d | --dir)
    DIR="$2"
    shift 2
    ;;
  -f | --force)
    FORCE=true
    shift
    ;;
  -v | --verbose)
    VERBOSE=true
    shift
    ;;
  -h | --help)
    usage
    exit 0
    ;;
  *)
    printf 'Unknown option: %s\n' "$1" >&2
    usage >&2
    exit 1
    ;;
  esac
done

case "$cmd" in
add)
  add_missing
  ;;
show)
  get_exclusions
  ;;
find)
  find_candidates
  ;;
check)
  check_status
  ;;
completions)
  generate_completions "${comp_shell:-bash}"
  ;;
*)
  usage
  exit 1
  ;;
esac
